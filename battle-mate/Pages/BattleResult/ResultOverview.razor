<h2 class="@((Right ? "text-start" : "text-end") + (PointsDifference < 0 ? " red" : " green"))">
  @PointsDifference
</h2>
<div class="@(Right ? "text-start" : "text-end")">
  @AllPoints
</div>
<UpAndDownComp Right="Right" Topic="W" Input="Wounds" InvokeChange="InvokeWounds" ></UpAndDownComp>
<UpAndDownComp Right="Right" Topic="R" Input="Ranks" InvokeChange="InvokeRanks"></UpAndDownComp>
<UpAndDownComp Right="Right" Topic="B" Input="Banners" InvokeChange="InvokeBanners"></UpAndDownComp>
<UpAndDownComp Right="Right" Topic="A" Input="AdditionalPoints" InvokeChange="InvokeAdditionalPoints"></UpAndDownComp>
<CycleChecker Right="Right" InvokeChange="InvokeCharging" Values="ChargeValues"></CycleChecker>
<CycleChecker Right="Right" InvokeChange="InvokeFlank" Values="FlankValues"></CycleChecker>
<CycleChecker Right="Right" InvokeChange="InvokeRear" Values="RearValues"></CycleChecker>

@code {
  [Parameter]
  public bool Right { get; set; }
  [Parameter]
  public int PointsDifference { get; set; }
  [Parameter]
  public int AllPoints { get; set; }
  [Parameter]
  public int Wounds { get; set; }
  [Parameter]
  public int Ranks { get; set; }
  [Parameter]
  public int Banners { get; set; }
  [Parameter]
  public int AdditionalPoints { get; set; }
  
  [Parameter]
  public EventCallback<int> InvokeWounds { get; set; }
  [Parameter]
  public EventCallback<int> InvokeRanks { get; set; }
  [Parameter]
  public EventCallback<int> InvokeBanners { get; set; }
  [Parameter]
  public EventCallback<int> InvokeAdditionalPoints { get; set; }
  
  [Parameter]
  public EventCallback<PointStrings> InvokeRear { get; set; }
  [Parameter]
  public EventCallback<PointStrings> InvokeFlank { get; set; }
  [Parameter]
  public EventCallback<PointStrings> InvokeCharging { get; set; }

  public List<PointStrings> ChargeValues => new() {new PointStrings(0, "not charging"), new PointStrings(1, "charging")};
  public List<PointStrings> FlankValues => new() {new PointStrings(0, "not flanking"), new PointStrings(1, "flanking"), new PointStrings(2, "great flank")};
  public List<PointStrings> RearValues => new() {new PointStrings(0, "no rear"), new PointStrings(2, "rear"), new PointStrings(3, "great rear")};
}