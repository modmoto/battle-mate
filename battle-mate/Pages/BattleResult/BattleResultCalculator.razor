@page "/"

<div class="row">
  <div class="col p-0 pe-2">
    <ResultOverview AllPoints="_state.PointsLeft"
                    PointsDifference="_state.PointsDifferenceLeft"
                    InvokeWounds="val => _state.WoundsLeft = val"
                    InvokeVsWounds="val => _state.VsWoundsLeft = val"
                    InvokeRanks="val => _state.RanksLeft = val"
                    InvokeBanners="val => _state.BannersLeft = val"
                    InvokeOverkill="val => _state.OverkillLeft = val"
                    InvokeAdditionalPoints="val => _state.AdditionalPointsLeft = val"
                    InvokeCharging="val => _state.ChargingIndexLeft = val"
                    InvokeFlank="val => _state.FlankIndexLeft = val"
                    InvokeRear="val => _state.RearIndexLeft = val"
                    ChargingIndex="_state.ChargingIndexLeft"
                    FlankIndex="_state.FlankIndexLeft"
                    RearIndex="_state.RearIndexLeft"
                    ChargeValues="_state.PossibleChargeValues"
                    FlankValues="_state.PossibleFlankValues"
                    RearValues="_state.PossibleRearValues"
                    Ranks="_state.RanksLeft"
                    Banners="_state.BannersLeft"
                    Overkill="_state.OverkillLeft"
                    AdditionalPoints="_state.AdditionalPointsLeft"
                    HasAdditionalPoints="_state.HasAdditionalPoints"
                    Wounds="_state.WoundsLeft"
                    VsWounds="_state.VsWoundsLeft"
                    HasVsPoints="_state.HasVerminSwarmPoints">
    </ResultOverview>
  </div>
  <div class="col p-0 ps-2">
    <ResultOverview Right
                    AllPoints="_state.PointsRight"
                    PointsDifference="_state.PointsDifferenceRight"
                    InvokeWounds="val => _state.WoundsRight = val"
                    InvokeVsWounds="val => _state.VsWoundsRight = val"
                    InvokeRanks="val => _state.RanksRight = val"
                    InvokeBanners="val => _state.BannersRight = val"
                    InvokeOverkill="val => _state.OverkillRight = val"
                    InvokeAdditionalPoints="val => _state.AdditionalPointsRight = val"
                    InvokeCharging="val => _state.ChargingIndexRight = val"
                    InvokeFlank="val => _state.FlankIndexRight = val"
                    InvokeRear="val => _state.RearIndexRight = val"
                    ChargingIndex="_state.ChargingIndexRight"
                    FlankIndex="_state.FlankIndexRight"
                    RearIndex="_state.RearIndexRight"
                    ChargeValues="_state.PossibleChargeValues"
                    FlankValues="_state.PossibleFlankValues"
                    RearValues="_state.PossibleRearValues"
                    Ranks="_state.RanksRight"
                    Banners="_state.BannersRight"
                    Overkill="_state.OverkillRight"
                    AdditionalPoints="_state.AdditionalPointsRight"
                    HasAdditionalPoints="_state.HasAdditionalPoints"
                    Wounds="_state.WoundsRight"
                    VsWounds="_state.VsWoundsRight"
                    HasVsPoints="_state.HasVerminSwarmPoints">
    </ResultOverview>
  </div>
</div>
<div class="row">
  <button type="button" class="btn btn-outline-danger w-100 my-2" @onclick="_state.ResetStats">
    Reset combat result
  </button>
</div>
<div class="row d-flex flex-row-reverse">
  <button type="button" class="btn btn-outline-secondary w-25" data-bs-toggle="modal" data-bs-target="#optionsModal">
    <span class="oi oi-menu" aria-hidden="true"></span>
  </button>
  <div class="modal fade" id="optionsModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-body">
          <div class="modal-header">
            <h5 class="modal-title">Default options</h5>
          </div>
          <div class="row">
            <div class="col">
              <UpAndDownOptionComp Topic="Ranks" Input="_state.DefaultRanks" InvokeChange="val => _state.DefaultRanks = val"></UpAndDownOptionComp>
              <UpAndDownOptionComp Topic="Banners" Input="_state.DefaultBanners" InvokeChange="val => _state.DefaultBanners = val"></UpAndDownOptionComp>
              <CycleChecker Values="_state.PossibleVerminSwarmWoundOptions" InvokeChange="newVal => _state.HasVerminSwarmPoints = newVal != 0" Index="_state.HasVerminSwarmPoints ? 1 : 0"></CycleChecker>
              <CycleChecker Values="_state.PossibleAdditionalOptions" InvokeChange="newVal => _state.HasAdditionalPoints = newVal != 0" Index="_state.HasAdditionalPoints ? 1 : 0"></CycleChecker>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="SaveCombatOptions">Close</button>
        </div>
      </div>
    </div>
  </div>
</div>

@inject CombatResultState _state
@inject CombatOptionsRepository _repository

@code {
  private async void SaveCombatOptions()
  {
    await _repository.SetOptions(new CombatOptions
    {
      DefaultBanners = _state.DefaultBanners,
      DefaultRanks = _state.DefaultRanks,
      HasAdditionalPoints = _state.HasAdditionalPoints,
      HasVerminSwarmPoints = _state.HasVerminSwarmPoints,
    });
  }

  protected override void OnInitialized()
  {
    _state.OnLoadFinished += (_, _) => { StateHasChanged(); };
  }
}