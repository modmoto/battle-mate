@page "/"

<div class="container mb-3">
    <button class="btn btn-secondary" @onclick="() => SetAndRollDice(1)">1</button>
    <button class="btn btn-secondary" @onclick="() => SetAndRollDice(2)">2</button>
    <button class="btn btn-secondary" @onclick="() => SetAndRollDice(3)">3</button>
    <button class="@GetDiceClass(3)" @onclick="() => SelectDice(3)">d3</button>
    <button class="@GetDiceClass(6)" @onclick="() => SelectDice(6)">d6</button>
    <button class="@GetDiceClass(8)" @onclick="() => SelectDice(8)">d8</button>
</div>
<div class="container mb-3">
    <div class="input-group mb-3">
      <input type="number" class="form-control" placeholder="Dice" aria-label="Dice" @bind="_diceAmount">
    </div>
    <button class="btn btn-primary" @onclick="RollDice">Roll Dice</button>
</div>
<div class="container">
    @foreach (var message in _messages)
    {
        <div class="card mb-3">
            @if (message.Results.First().RollType == RollType.Start)
            {
                <div class="card-header">
                    @(message.Results.First().RawResults.Count)D@(message.Results.First().DiceSides)
                </div>
            }
            <div class="card-body">
                @foreach (var rollResult in message.Results.Select((val, index) => new { val, index}))
                {
                    @if (rollResult.val.RollType == RollType.RerollBiggerThan)
                    {
                        <div>
                            Reroll @(rollResult.val.DiceBorder)+ (@string.Join(", ", rollResult.val.RerollResults))
                        </div>
                    }
                    @if (rollResult.val.RollType == RollType.RerollSmallerThan)
                    {
                        <div>
                            Reroll @(string.Join(", ", Enumerable.Range(1, rollResult.val.DiceBorder))) (@string.Join(", ", rollResult.val.RerollResults))
                        </div>
                    }
                    @if (rollResult.val.RollType == RollType.ContinueRollBiggerThan)
                    {
                        <div>
                            Continue with @(rollResult.val.DiceBorder)+
                        </div>
                    }
                    @if (rollResult.val.RollType == RollType.ContinueRollSmallerThan)
                    {
                        <div>
                            Continue with @(string.Join(", ", Enumerable.Range(1, rollResult.val.DiceBorder)))
                        </div>
                    }
                    <div class="container">
                        <b>@(rollResult.val.RawResults.Count)D@(rollResult.val.DiceSides)</b>: <span>@string.Join(", ", rollResult.val.RawResults)
                        </span>
                        @if (rollResult.val.RawResults.Count > 1)
                        {
                            <span> (@rollResult.val.RawResults.Sum())</span>
                        }
                    </div>
                    <div class="container">
                        <div  class="row align-items-start">
                        @foreach (var res in rollResult.val.GroupedResults)
                        {
                            <div class="col">
                                <b>@res.Min+</b><span class="me-2">: @res.BiggerThanAmount</span>
                                @if (rollResult.index + 1== message.Results.Count)
                                {
                                    <div class="mb-1">
                                        <button class="@GetClassSmallerThanAmount(res.SmallerThanAmount)" @onclick="() => ContinueRollSmallerThanDice(res.Min)">
                                            <span class="oi oi-chevron-left" style="width: 1em" aria-hidden="true"></span>
                                        </button>
                                        <button class="@GetClassContinueRollBiggerThanDice(res.BiggerThanAmount)" @onclick="() => ContinueRollBiggerThanDice(res.Min)">
                                            <span class="oi oi-chevron-right" style="width: 1em" aria-hidden="true"></span>
                                        </button>
                                    </div>
                                    <div>
                                        <button class="@GetClassSmallerThanAmount(res.SmallerThanAmount)" @onclick="() => RerollSmallerThanDice(res.Min)">
                                            <span class="oi oi-action-undo" style="width: 1em" aria-hidden="true"></span>
                                        </button>
                                        <button class="@GetClassContinueRollBiggerThanDice(res.BiggerThanAmount)" @onclick="() => RerollBiggerThanDice(res.Min)">
                                            <span class="oi oi-action-redo" style="width: 1em" aria-hidden="true"></span>
                                        </button>
                                    </div>
                                }
                            </div>
                        }

                            <div class="col align-self-end">
                                @if (rollResult.index + 1 == message.Results.Count)
                                {
                                    <button class="btn btn-outline-danger" @onclick="DeleteLastRoll">
                                        X
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>


@inject Dice _dice

@code {
    private int _diceAmount = 1;
    private int _selectedDice = 6;
    private List<DiceMessage> _messages = new();
    private DiceMessage CurrentDiceMessage => _messages.FirstOrDefault();

    private void SetAndRollDice(int amount)
    {
        _diceAmount = amount;
        RollDice();
    }

    private void RollDice()
    {
        var rollResult = _dice.Roll(_diceAmount, _selectedDice);
        var diceMessage = new DiceMessage(rollResult);
        _messages.Insert(0, diceMessage);
    }

    private void SelectDice(int diceSide)
    {
        _selectedDice = diceSide;
    }

    private object GetDiceClass(int dice)
    {
        return dice == _selectedDice ? "btn btn-outline-primary" : "btn btn-outline-secondary";
    }

    private object GetClassSmallerThanAmount(int smallerThanAmount)
    {
        return smallerThanAmount == 0
            ? "btn btn-outline-primary disabled"
            : "btn btn-outline-primary";
    }

    private void RerollSmallerThanDice(int resMin)
    {
        var newRoll = _dice.RerRollSmallerThan(resMin, CurrentDiceMessage.Results.LastOrDefault());
        CurrentDiceMessage.Results.Add(newRoll);
    }

    private void RerollBiggerThanDice(int resMin)
    {
        var newRoll = _dice.RerRollBiggerThan(resMin, CurrentDiceMessage.Results.LastOrDefault());
        CurrentDiceMessage.Results.Add(newRoll);
    }

    private void DeleteLastRoll()
    {
        if (CurrentDiceMessage.Results.Count == 1)
        {
            _messages.RemoveAt(0);
        }
        else
        {
            CurrentDiceMessage.Results.RemoveAt(CurrentDiceMessage.Results.Count - 1);
        }
    }

    private void ContinueRollSmallerThanDice(int resMax)
    {
        var newRoll = _dice.ContinueRollSmallerThan(resMax, CurrentDiceMessage.Results.LastOrDefault());
        CurrentDiceMessage.Results.Add(newRoll);
    }

    private void ContinueRollBiggerThanDice(int resMin)
    {
        var newRoll = _dice.ContinueRollBiggerThan(resMin, CurrentDiceMessage.Results.LastOrDefault());
        CurrentDiceMessage.Results.Add(newRoll);
    }

    private object GetClassContinueRollBiggerThanDice(int biggerThanAmount)
    {
        return biggerThanAmount == 0
            ? "btn btn-outline-primary disabled"
            : "btn btn-outline-primary";
    }

}

