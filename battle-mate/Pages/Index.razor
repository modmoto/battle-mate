@page "/"

<div class="mb-3">
  <button class="btn btn-secondary" @onclick="() => SetAndRollDice(1)">1</button>
  <button class="btn btn-secondary" @onclick="() => SetAndRollDice(2)">2</button>
  <button class="btn btn-secondary" @onclick="() => SetAndRollDice(3)">3</button>
  <button class="btn btn-secondary" @onclick="() => SetAndRollDice(4)">4</button>
  <button class="@GetDiceClass(3)" @onclick="() => SelectDice(3)">d3</button>
  <button class="@GetDiceClass(6)" @onclick="() => SelectDice(6)">d6</button>
  <button class="@GetDiceClass(8)" @onclick="() => SetAndRollDice(1, 8)">d8</button>
</div>
<div class="mb-3">
  <div class="input-group mb-3">
    <input inputmode="numeric" pattern="[0-9]*" type="text" class="form-control" @onfocus="PrepareForRoll" placeholder="Dice" aria-label="Dice" @bind="_diceAmount">
  </div>
  <div class="row align-items-center mt-2">
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(2)">
        2+
      </button>
    </div>
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(3)">
        3+
      </button>
    </div>
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(4)">
        4+
      </button>
    </div>
  </div>

  <div class="row align-items-center">
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(5)">
        5+
      </button>
    </div>
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(6)">
        6+
      </button>
    </div>
    <div class="col">
      <button type="button" class="btn btn-outline-secondary w-100 my-2" data-bs-toggle="modal" data-bs-target="#exampleModal">
        <span class="oi oi-menu" aria-hidden="true"></span>
      </button>
      <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-body">
              <div class="modal-header">
                <h5 class="modal-title">Actions</h5>
              </div>
              <div class="row">
                <div class="col">
                  <button type="button" class="btn btn-outline-primary w-100 my-2" data-bs-dismiss="modal">Reroll</button>
                </div>
                <div class="col">
                  <button type="button" class="btn btn-outline-primary w-100 my-2" data-bs-dismiss="modal" disabled="@(!EnabledNoSave)" @onclick="RollWithNoSaves">
                    @if (CurrentDiceMessage?.Results?.First()?.RollState is RollType.ToWound)
                    {
                      <span>No armor saves</span>
                    } 
                    else if (CurrentDiceMessage?.Results?.First()?.RollState is RollType.ArmorSave)
                    {
                      <span>No ward saves</span>
                    }
                    else
                    {
                      <span>No saves</span>
                    }
                  </button>
                </div>
              </div>
              <div class="modal-header">
                <h5 class="modal-title">Options</h5>
              </div>
              <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="option-battlefocus" checked="@battlefocusChecked">
                <label class="form-check-label" for="option-battlefocus">
                  Battlefocus
                </label>
              </div>
              <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="option-poison" checked="@poisonChecked">
                <label class="form-check-label" for="option-poison">
                  Poison
                </label>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-primary">Save</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div>
  @foreach (var message in _messages.Select((value, index) => new {value, index}))
  {
    <div class="card mb-3">
      @if (message.value.Results.First().RollState == RollType.None)
      {
        <div class="card-header">
          @(message.value.Results.First().RawResults.Count)D@(message.value.Results.First().DiceSides)
        </div>
      }
      @if (message.value.Results.Last().RollState == RollType.ToHit)
      {
        <div class="card-header">
          @(message.value.Results.First().RawResults.Count) attacks hitting on @(message.value.Results.First().DiceGoal)+
        </div>
      }
      <div class="card-body m-0">
        @foreach (var rollResult in message.value.Results.Select((val, index) => new {val, index}))
        {
          <div>
            @if (rollResult.val.RollState == RollType.RerollBiggerThan)
            {
              <div>
                Reroll @(rollResult.val.DiceGoal)+ (@string.Join(", ", rollResult.val.RerollResults))
              </div>
            }
            @if (rollResult.val.RollState == RollType.RerollSmallerThan)
            {
              <div>
                Reroll @(string.Join(", ", Enumerable.Range(1, rollResult.val.DiceGoal))) (@string.Join(", ", rollResult.val.RerollResults))
              </div>
            }
            @if (rollResult.val.RollState == RollType.ToHit)
            {
              <div>
                <b>@(rollResult.val.SucessfullRolls) hitting</b> on @(rollResult.val.DiceGoal)+
              </div>
            }
            @if (rollResult.val.RollState == RollType.ToWound)
            {
              <div>
                <b>@(rollResult.val.SucessfullRolls) wounding</b> on @(rollResult.val.DiceGoal)+
              </div>
            }
            @if (rollResult.val.RollState == RollType.ArmorSave)
            {
              @if (rollResult.val.DiceGoal == _defaultNoRoll)
              {
                <div class="mb-3">
                  <b>No armor saves rolled</b>
                </div>
              }
              else
              {
                <div>
                  <b>@(rollResult.val.FailedRolls) armor saves failed</b> on @(rollResult.val.DiceGoal)+
                </div>
              }
            }
            @if (rollResult.val.RollState == RollType.WardSave)
            {
              @if (rollResult.val.DiceGoal == _defaultNoRoll)
              {
                <div class="mb-3">
                  <b>No ward saves rolled</b>
                </div>
              }
              else
              {
                <div>
                  <b>@(rollResult.val.FailedRolls) ward saves failed</b> on @(rollResult.val.DiceGoal)+
                </div>
              }
            }

            <div>
              @if (rollResult.index == 0 && message.index == 0)
              {
                <button class="btn btn-outline-danger float-end" @onclick="DeleteLastRoll">
                  X
                </button>  
              }
              else
              {
                <button class="btn btn-outline-danger float-end" style="visibility: collapse">
                  X
                </button>  
              }
            </div>
          </div>
          @if (rollResult.val.DiceGoal != _defaultNoRoll)
          {
            <div>
              <span>@(rollResult.val.RawResults.Count)D@(rollResult.val.DiceSides):</span>
              @if (rollResult.val.DiceGoal == 0)
              {
                @string.Join(", ", rollResult.val.RawResults)
              }
              else
              {
                @foreach (var res in rollResult.val.RawResults.Select((value, index) => new {value, index}))
                {
                  if (rollResult.val.DiceGoal > res.value && rollResult.val.DiceGoal != 0)
                  {
                    <span class="red">
                      @(res.value)
                      @if (res.index + 1 != rollResult.val.RawResults.Count)
                      {
                        <span>, </span>
                      }
                    </span>
                  }
                  else
                  {
                    <span class="green">
                      @(res.value)
                      @if (res.index + 1 != rollResult.val.RawResults.Count)
                      {
                        <span>, </span>
                      }
                    </span>
                  }
                }
              }
              @if (rollResult.val.RawResults.Count > 1)
              {
                <span> (@rollResult.val.RawResults.Sum())</span>
              }
            </div>
            <div>
              <div class="row justify-content-between mb-3">
                @foreach (var res in rollResult.val.GroupedResults)
                {
                  <div class="col">
                    @res.Min+ : @res.BiggerThanAmount
                  </div>
                }
              </div>
            </div>
          }
        }
      </div>
    </div>
  }
</div>

@inject Dice _dice

@code {
  private int? _diceAmount;
  private int _selectedDice = 6;
  private int _defaultNoRoll = 7;
  private bool poisonChecked = false;
  private bool battlefocusChecked = false;
  private bool EnabledNoSave => CurrentDiceMessage?.Results?.First()?.RollState is RollType.ToWound or RollType.ArmorSave;
  private readonly List<DiceMessage> _messages = new();
  private RollType _currentRoleState = RollType.None;
  private DiceMessage CurrentDiceMessage => _messages.FirstOrDefault();

  private void SetAndRollDice(int amount)
  {
    _diceAmount = amount;
    RollDice();
  }

  private void RollDice()
  {
    if (_diceAmount != null)
    {
      var rollResult = _dice.JustRoll(_diceAmount.Value, _selectedDice);
      var diceMessage = new DiceMessage(rollResult);
      _messages.Insert(0, diceMessage);
    }
  }

  private void SelectDice(int diceSide)
  {
    _selectedDice = diceSide;
  }

  private object GetDiceClass(int dice)
  {
    return dice == _selectedDice ? "btn btn-outline-primary" : "btn btn-outline-secondary";
  }

  private void DeleteLastRoll()
  {
    var rollResults = CurrentDiceMessage.Results;
    if (rollResults.Count == 1)
    {
      _messages.RemoveAt(0);
      _currentRoleState = RollType.None;
    }
    else
    {
      rollResults.RemoveAt(0);
      _currentRoleState = rollResults.First().RollState;
    }
  }

  private void ClickDice(int toHit)
  {
    if (_diceAmount != null)
    {
      if (_currentRoleState == RollType.None || _currentRoleState == RollType.WardSave)
      {
        var result = DoRoll(_diceAmount.Value, toHit, null);
        _messages.Insert(0, new DiceMessage(result));
        _currentRoleState = result.RollState;
      }
      else
      {
        var rollResults = CurrentDiceMessage.Results;
        var lastResult = rollResults.First();
        var result = DoRoll(0, toHit, lastResult);
        rollResults.Insert(0, result);
        _currentRoleState = result.RollState;
      }
    }
  }

  private RollResult DoRoll(int diceAmount, int toHit, RollResult oldResult)
  {
    return _currentRoleState switch
    {
      RollType.None => _dice.ToHit(diceAmount, _selectedDice, toHit),
      RollType.ToHit => _dice.ToWound(toHit, oldResult),
      RollType.ToWound => _dice.ArmorSave(toHit, oldResult),
      RollType.ArmorSave => _dice.WardSave(toHit, oldResult),
      _ => _dice.ToHit(diceAmount, _selectedDice, toHit)
      };
  }

  private void SetAndRollDice(int amount, int sides)
  {
    _selectedDice = sides;
    SetAndRollDice(amount);
  }

  private void PrepareForRoll()
  {
    _diceAmount = null;
    _selectedDice = 6;
  }

  private void RollWithNoSaves()
  {
    if (CurrentDiceMessage?.Results?.First()?.RollState == RollType.ToWound)
    {
      var rollResults = CurrentDiceMessage.Results;
      var lastResult = rollResults.First();
      var result = new RollResult(lastResult.RawResults, lastResult.RerollResults, lastResult.DiceSides, RollType.ArmorSave, _defaultNoRoll);
      rollResults.Insert(0, result);
      _currentRoleState = result.RollState;
    }
    else if (CurrentDiceMessage?.Results?.First()?.RollState == RollType.ArmorSave)
    {
      var rollResults = CurrentDiceMessage.Results;
      var lastResult = rollResults.First();
      var result = new RollResult(lastResult.RawResults, lastResult.RerollResults, lastResult.DiceSides, RollType.WardSave, _defaultNoRoll);
      rollResults.Insert(0, result);
      _currentRoleState = result.RollState;
    }
  }
}