@page "/dice"

<div class="row" style="float: right">
  <div class="mb-3 input-group">
    <button class="@GetDiceClass(3)" @onclick="() => SelectDice(3)">D3</button>
    <button class="@GetDiceClass(6)" @onclick="() => SelectDice(6)">D6</button>
    <button class="@GetDiceClass(8)" @onclick="() => SetAndRollDice(1, 8)">D8</button>
  </div>
</div>
<div class="mb-3">
<div class="input-group mb-3">
  <button class="btn btn-outline-primary" @onclick="() => SetAndRollDice(1)">1</button>
  <button class="btn btn-outline-primary" @onclick="() => SetAndRollDice(2)">2</button>
  <button class="btn btn-outline-primary" @onclick="() => SetAndRollDice(3)">3</button>
  <button class="btn btn-outline-primary" @onclick="() => SetAndRollDice(4)">4</button>
  <input inputmode="numeric" pattern="[0-9]*" type="number" class="form-control" style="text-align: right;" @onfocus="PrepareForRoll" placeholder="Amount of dice" aria-label="Dice" @bind="_diceState.DiceAmount">
</div>
<div class="row align-items-center mt-2">
  <div class="col">
    <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(2)">
      2+
    </button>
  </div>
  <div class="col">
    <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(3)">
      3+
    </button>
  </div>
  <div class="col">
    <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(4)">
      4+
    </button>
  </div>
</div>
<div class="row align-items-center mt-2">
  <div class="col">
    <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(5)">
      5+
    </button>
  </div>
  <div class="col">
    <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(6)">
      6+
    </button>
  </div>
  <div class="col">
    <button class="btn btn-outline-primary w-100 my-2" @onclick="SkipDice">
      @if (CurrentRoleState is RollState.None or RollState.WardSave or RollState.NoWardSave)
      {
        <span>auto hit</span>
      }
      @if (CurrentRoleState is RollState.ToHit or RollState.AutomaticHit)
      {
        <span>auto wnd</span>
      }
      @if (CurrentRoleState is RollState.ToWound or RollState.AutomaticWound)
      {
        <span>no armor</span>
      }
      @if (CurrentRoleState is RollState.ArmorSave or RollState.NoArmorSave)
      {
        <span>no ward</span>
      }
    </button>
  </div>
</div>
<div class="row align-items-center">
  <div class="col">
    <button class="btn btn-outline-primary w-100 my-2 collapse">
    </button>
  </div>
  <div class="col">
    <button class="btn btn-outline-primary w-100 my-2 dropdown-toggle" type="button" id="diceOptions" data-bs-toggle="dropdown" aria-expanded="false">
      <span class="oi oi-cog"></span>
    </button>
    <ul class="dropdown-menu" aria-labelledby="diceOptions">
      <li class="py-3">
        <input class="form-check-input" type="checkbox" value="" id="_poisonChecked" checked="@_poisonChecked" disabled="@(CurrentRoleState is not (RollState.WardSave or RollState.None or RollState.ToHit))" @onclick="TogglePoison">
        <label class="form-check-label ps-2" for="_poisonChecked">
          Poison
        </label>
      </li>
      <li class="py-3">
        <input class="form-check-input" type="checkbox" value="" id="_poison5Checked" checked="@_poison5Checked" disabled="@(CurrentRoleState is not (RollState.WardSave or RollState.None or RollState.ToHit))" @onclick="TogglePoison5">
        <label class="form-check-label ps-2" for="_poison5Checked">
          Poison 5+
        </label>
      </li>
      <li class="py-3">
        <input class="form-check-input" type="checkbox" value="" id="_battleFocusChecked" checked="@_battleFocusChecked" disabled="@(CurrentRoleState is not (RollState.WardSave or RollState.None or RollState.ToHit))" @onclick="ToggleBattleFocus">
        <label class="form-check-label ps-2" for="_battleFocusChecked">
          Battlefocus
        </label>
      </li>
      <li class="py-3">
        <input class="form-check-input" type="checkbox" value="" id="_lethalStrikeChecked" checked="@_lethalStrikeChecked" disabled="@(CurrentRoleState is not (RollState.WardSave or RollState.None or RollState.ToHit or RollState.ToWound))" @onclick="ToggleLethalStrike">
        <label class="form-check-label ps-2" for="_lethalStrikeChecked">
          Lethal strike
        </label>
      </li>
    </ul>
  </div>
  <div class="col">
    <button class="btn btn-outline-primary w-100 my-2 dropdown-toggle" type="button" id="rerollOptions" data-bs-toggle="dropdown" aria-expanded="false">
      <span class="oi oi-reload"></span>
    </button>
    <ul class="dropdown-menu" aria-labelledby="rerollOptions">
      <li>
        <button class="btn btn-outline-primary m-2 float-end" disabled="@RerollNotPossible" @onclick="RerollFailed">
          <span>Reroll</span>
          @if (CurrentRoleState is RollState.ToHit)
          {
            <span> misses</span>
          }
          @if (CurrentRoleState is RollState.ToWound)
          {
            <span> failed wounds</span>
          }
          @if (CurrentRoleState is RollState.ArmorSave)
          {
            <span> failed armor save</span>
          }
          @if (CurrentRoleState is RollState.WardSave)
          {
            <span> failed ward save</span>
          }
        </button>
      </li>
      <li>
        <button class="btn btn-outline-primary m-2 float-end" disabled="@RerollNotPossible" @onclick="RerollSuceeded">
          <span>Reroll</span>
          @if (CurrentRoleState is RollState.ToHit)
          {
            <span> hits</span>
          }
          @if (CurrentRoleState is RollState.ToWound)
          {
            <span> wounds</span>
          }
          @if (CurrentRoleState is RollState.ArmorSave)
          {
            <span> armor save</span>
          }
          @if (CurrentRoleState is RollState.WardSave)
          {
            <span> ward save</span>
          }
        </button>
      </li>
      <li>
        <button class="btn btn-outline-primary m-2 float-end" disabled="@RerollNotPossible" @onclick="RerollOnes">
          Reroll 1s
        </button>
      </li>
    </ul>
    </div>
</div>
</div>

<div>
@foreach (var message in _diceState.DiceMessages.Select((value, index) => new {value, index}))
{
  <div class="card mb-3">
  @if (FirstRoleState == RollState.None)
  {
    <div class="card-header">
      @(message.value.Results.Last().RawResults.Count)D@(message.value.Results.Last().DiceSides)
    </div>
  }

  @if (FirstRoleState is RollState.ToHit or RollState.AutomaticHit)
  {
    <div class="card-header">
      <div class="row justify-content-between">
        <span class="col">
          @if (message.value.Results.Last().RollState is RollState.ToHit)
          {
            <span>@(message.value.Results.Last().SucessfullRolls) hitting on @(message.value.Results.Last().DiceGoal)+</span>
          }
          @if (message.value.Results.Last().RollState is RollState.AutomaticHit)
          {
            <span>@(message.value.Results.Last().RawResults.Count) automatic hits</span>
          }

          @if (SpecialRules.Count > 0)
          {
            <span> with @(string.Join(", ", SpecialRules))</span>
          }
        </span>

        @if (FirstRoleState != RollState.None && message.value.Results[0].RollState is RollState.WardSave or RollState.NoWardSave)
        {
          <div class="col">
            <div class="float-end">
              <span class="me-1">
                <b>@message.value.Results[0].FailedRolls</b> wounds
              </span>
              @* <button class="btn btn-outline-success"> *@
              @*   <span class="oi oi-plus"></span> *@
              @* </button> *@
            </div>
          </div>
        }

      </div>

    </div>
  }
  <div class="card-body m-0">
    @foreach (var rollResult in message.value.Results.Select((val, index) => new {val, index}))
    {
      @if (rollResult.index == 0 && message.index == 0)
      {
        <button class="btn btn-outline-secondary float-end ms-2" @onclick="DeleteLastRoll">
          <span class="oi oi-action-undo"></span>
        </button>
      }

      <div>
        @if (rollResult.val.RerollState is RerollState.RerollBiggerThan)
        {
          @if (rollResult.val.RollState is RollState.ArmorSave or RollState.WardSave)
          {
            <div>
              <b>+@rollResult.val.FailedRerolls from rerolling</b> @(rollResult.val.DiceGoal)+ (@(rollResult.val.RerollResults.Count)D@(_diceState.SelectedDice)) => (<RedGreenResultList Rolls="@rollResult.val.RerollResults" DiceGoal="@rollResult.val.DiceGoal"/>)
            </div>
          }
          else
          {
            <div>
              <b>-@rollResult.val.FailedRerolls from rerolling</b> @(rollResult.val.DiceGoal)+ (@(rollResult.val.RerollResults.Count)D@(_diceState.SelectedDice)) => (<RedGreenResultList Rolls="@rollResult.val.RerollResults" DiceGoal="@rollResult.val.DiceGoal"/>)
            </div>
          }
        }
        @if (rollResult.val.RerollState is RerollState.RerollSmallerThan)
        {
          if (rollResult.val.RollState is RollState.ToHit or RollState.ToWound)
          {
            <div>
              <b>+@rollResult.val.SucessfullRerolls from rerolling</b> up to @(rollResult.val.DiceGoal - 1) (@(rollResult.val.RerollResults.Count)D@(_diceState.SelectedDice)) => (<RedGreenResultList Rolls="@rollResult.val.RerollResults" DiceGoal="@rollResult.val.DiceGoal"/>)
            </div>
          }
          else
          {
            <div>
              <b>-@rollResult.val.SucessfullRerolls from rerolling</b> up to @(rollResult.val.DiceGoal - 1) (@(rollResult.val.RerollResults.Count)D@(_diceState.SelectedDice)) => (<RedGreenResultList Rolls="@rollResult.val.RerollResults" DiceGoal="@rollResult.val.DiceGoal"/>)
            </div>
          }
        }
        @if (rollResult.val.RerollState is RerollState.Reroll1s)
        {
          if (rollResult.val.RollState is RollState.ToHit or RollState.ToWound)
          {
            <div>
              <b>+@rollResult.val.SucessfullRerolls from rerolling</b> 1s (@(rollResult.val.RerollResults.Count)D@(_diceState.SelectedDice)) => (<RedGreenResultList Rolls="@rollResult.val.RerollResults" DiceGoal="@rollResult.val.DiceGoal"/>)
            </div>
          }
          else
          {
            <div>
              <b>-@rollResult.val.SucessfullRerolls from rerolling</b> 1s (@(rollResult.val.RerollResults.Count)D@(_diceState.SelectedDice)) => (<RedGreenResultList Rolls="@rollResult.val.RerollResults" DiceGoal="@rollResult.val.DiceGoal"/>)
            </div>
          }
        }
        @if (rollResult.val.RollState == RollState.ToHit)
        {
          <div>
            <b>@(rollResult.val.SucessfullRolls) hitting</b>
            @if (rollResult.val.BattleFocus)
            {
              <span> (+@rollResult.val.BattleFocusHits hits from Battlefocus)</span>
            }
            <span> on @(rollResult.val.DiceGoal)+</span>
            @if (rollResult.val.Poison || rollResult.val.Poison5Up)
            {
              <span>, Poison: @rollResult.val.PoisonHits</span>
            }
          </div>
        }
        @if (rollResult.val.RollState == RollState.ToWound)
        {
          <div>
            <b>@(rollResult.val.SucessfullRolls) wounding</b>
            @if (rollResult.val.Poison || rollResult.val.Poison5Up)
            {
              <span> (+@rollResult.val.PoisonHits wounds from Poison)</span>
            }
            <span> on @(rollResult.val.DiceGoal)+</span>
            @if (rollResult.val.LethalStrike)
            {
              <span>, Lethal Strike: @rollResult.val.LethalStrikeHits</span>
            }
          </div>
        }
        @if (rollResult.val.RollState == RollState.AutomaticHit)
        {
          <div>
            <b>@(rollResult.val.SucessfullRolls) automatic hits</b>
          </div>
        }
        @if (rollResult.val.RollState == RollState.AutomaticWound)
        {
          <div>
            <b>@(rollResult.val.SucessfullRolls) automatic wounds</b>
          </div>
        }
        @if (rollResult.val.RollState == RollState.NoArmorSave)
        {
          <div>
            <b>@(rollResult.val.FailedRolls) automatic armor fails</b>
          </div>
        }
        @if (rollResult.val.RollState == RollState.NoWardSave)
        {
          <div>
            <b>@(rollResult.val.FailedRolls) automatic ward fails</b>
          </div>
        }
        @if (rollResult.val.RollState == RollState.ArmorSave)
        {
          <div>
            <b>@(rollResult.val.FailedRolls) armor saves failed</b>
            @if (rollResult.val.LethalStrike)
            {
              <span> (+@rollResult.val.LethalStrikeHits from Lethal Strike)</span>
            }

            <span> on @(rollResult.val.DiceGoal)+</span>
          </div>
        }
        @if (rollResult.val.RollState == RollState.WardSave)
        {
          <div>
            <b>@(rollResult.val.FailedRolls) ward saves failed</b> on @(rollResult.val.DiceGoal)+
          </div>
        }
      </div>

      @if (rollResult.val.DiceGoal != _defaultNoRoll && rollResult.val.RollState is RollState.ToHit or RollState.ToWound or RollState.ArmorSave or RollState.WardSave)
      {
        <div>
          <span>@(rollResult.val.RawResults.Count)D@(rollResult.val.DiceSides): </span>
          @if (rollResult.val.DiceGoal == 0)
          {
            @string.Join(", ", rollResult.val.RawResults)
          }
          else
          {
            <RedGreenResultList Rolls="@rollResult.val.RawResults" DiceGoal="@rollResult.val.DiceGoal"/>
          }
          @if (rollResult.val.RawResults.Count > 1)
          {
            <span> (@rollResult.val.RawResults.Sum())</span>
          }
        </div>
        @if (rollResult.val.DiceGoal != 0)
        {
          <div class="row justify-content-between mb-3">
            @foreach (var res in rollResult.val.GroupedResults)
            {
              <div class="col">
                @(res.Amount)x@(res.Min)
              </div>
            }
          </div>
        }
      }
    }
  </div>
  </div>
}
</div>

@inject Dice _dice
@inject DiceState _diceState

@code {
  private readonly int _defaultNoRoll = 7;
  private bool _poisonChecked;
  private bool _poison5Checked;
  private bool _lethalStrikeChecked;
  private bool _battleFocusChecked;
  private bool IsFirstRoll => CurrentRoleState is RollState.WardSave or RollState.NoWardSave or RollState.None;
  private RollResult CurrentRole => CurrentDiceMessage?.Results?.First();
  private bool RerollNotPossible => CurrentRole?.RerollState != RerollState.NoReroll || CurrentRoleState is RollState.AutomaticHit or RollState.AutomaticWound or RollState.NoArmorSave or RollState.NoWardSave;
  private RollState CurrentRoleState => CurrentDiceMessage?.Results?.First().RollState ?? RollState.None;
  private RollState FirstRoleState => CurrentDiceMessage?.Results?.Last().RollState ?? RollState.None;
  private DiceMessage CurrentDiceMessage => _diceState.DiceMessages.FirstOrDefault();

  public List<string> SpecialRules
  {
    get
    {
      var list = new List<string>();
      if (CurrentRole?.Poison == true && CurrentRole?.Poison5Up != true) list.Add("Poison");
      if (CurrentRole?.Poison5Up == true) list.Add("Poison 5+");
      if (CurrentRole?.BattleFocus == true) list.Add("Battlefocus");
      if (CurrentRole?.LethalStrike == true) list.Add("Lethal strike");
      return list;
    }
  }

  private void SetAndRollDice(int amount)
  {
    _diceState.DiceAmount = amount;
    var rollResult = _dice.JustRoll(_diceState.DiceAmount.Value, _diceState.SelectedDice);
    var diceMessage = new DiceMessage(rollResult);
    _diceState.DiceMessages.Insert(0, diceMessage);
  }

  private void SelectDice(int diceSide)
  {
    _diceState.SelectedDice = diceSide;
  }

  private object GetDiceClass(int dice)
  {
    return dice == _diceState.SelectedDice ? "btn btn-primary" : "btn btn-outline-secondary";
  }

  private void DeleteLastRoll()
  {
    var rollResults = CurrentDiceMessage.Results;
    if (rollResults[0].RerollState != RerollState.NoReroll)
    {
      rollResults[0] = rollResults[0].UndoReroll();
    }
    else if (rollResults.Count == 1)
    {
      _diceState.DiceMessages.RemoveAt(0);
    }
    else
    {
      rollResults.RemoveAt(0);
    }
  }

  private void ClickDice(int toHit)
  {
    if (_diceState.DiceAmount != null || !IsFirstRoll)
    {
      if (IsFirstRoll)
      {
        var result = DoRoll(_diceState.DiceAmount.Value, toHit, null, false);
        _diceState.DiceMessages.Insert(0, new DiceMessage(result));
      }
      else
      {
        var rollResults = CurrentDiceMessage.Results;
        var lastResult = rollResults.First();
        var result = DoRoll(0, toHit, lastResult, false);
        rollResults.Insert(0, result);
      }
    }
  }

  private RollResult DoRoll(int diceAmount, int toHit, RollResult oldResult, bool automaticHits)
  {
    var rollResult = CurrentRoleState switch
    {
      RollState.None => _dice.ToHit(diceAmount, _diceState.SelectedDice, toHit, automaticHits, _battleFocusChecked, _poisonChecked, _poison5Checked, _lethalStrikeChecked),
      RollState.AutomaticHit => _dice.ToWound(toHit, oldResult),
      RollState.ToHit => _dice.ToWound(toHit, oldResult),
      RollState.ToWound => _dice.ArmorSave(toHit, oldResult),
      RollState.AutomaticWound => _dice.ArmorSave(toHit, oldResult),
      RollState.ArmorSave => _dice.WardSave(toHit, oldResult),
      RollState.NoArmorSave => _dice.WardSave(toHit, oldResult),
      _ => _dice.ToHit(diceAmount, _diceState.SelectedDice, toHit, automaticHits, _battleFocusChecked, _poisonChecked, _poison5Checked, _lethalStrikeChecked)
      };
    _battleFocusChecked = false;
    _poisonChecked = false;
    _poison5Checked = false;
    _lethalStrikeChecked = false;
    return rollResult;
  }

  private void SetAndRollDice(int amount, int sides)
  {
    _diceState.SelectedDice = sides;
    SetAndRollDice(amount);
  }

  private void PrepareForRoll()
  {
    _diceState.DiceAmount = null;
    _diceState.SelectedDice = 6;
  }

  private void RerollOnes()
  {
    if (CurrentRole != null)
    {
      var reroll = _dice.RerRollOnes(CurrentRole);
      CurrentDiceMessage.Results.RemoveAt(0);
      CurrentDiceMessage.Results.Insert(0, reroll);
    }
  }

  private void RerollFailed()
  {
    if (CurrentRole != null)
    {
      var reroll = _dice.RerRollSmallerThan(CurrentRole.DiceGoal - 1, CurrentRole);
      CurrentDiceMessage.Results.RemoveAt(0);
      CurrentDiceMessage.Results.Insert(0, reroll);
    }
  }

  private void RerollSuceeded()
  {
    if (CurrentRole != null)
    {
      var reroll = _dice.RerRollBiggerThan(CurrentRole.DiceGoal, CurrentRole);
      CurrentDiceMessage.Results.RemoveAt(0);
      CurrentDiceMessage.Results.Insert(0, reroll);
    }
  }

  private void SkipDice()
  {
    if (CurrentRoleState is RollState.None or RollState.WardSave or RollState.NoWardSave)
    {
      if (_diceState.DiceAmount == null) return;
      var newRoll = RollResult.AutoSucess(_diceState.DiceAmount.Value, new List<int>(), RollState.AutomaticHit);
      _diceState.DiceMessages.Insert(0, new DiceMessage(newRoll));
    }
    else if (CurrentRoleState is RollState.ToHit or RollState.AutomaticHit)
    {
      var newRoll = RollResult.AutoSucess(CurrentRole.SucessfullRolls, CurrentRole.OldResults, RollState.AutomaticWound);
      CurrentDiceMessage.Results.Insert(0, newRoll);
    }
    else if (CurrentRoleState is RollState.ToWound or RollState.AutomaticWound)
    {
      var newRoll = RollResult.AutoFail(CurrentRole.SucessfullRolls, CurrentRole.OldResults, RollState.NoArmorSave);
      CurrentDiceMessage.Results.Insert(0, newRoll);
    }
    else if (CurrentRoleState is RollState.ArmorSave or RollState.NoArmorSave)
    {
      var newRoll = RollResult.AutoFail(CurrentRole.FailedRolls, CurrentRole.OldResults, RollState.NoWardSave);
      CurrentDiceMessage.Results.Insert(0, newRoll);
    }
  }

  private void ToggleLethalStrike()
  {
    _lethalStrikeChecked = !_lethalStrikeChecked;
    var currentRole = CurrentRole;
    if (_lethalStrikeChecked && CurrentRoleState == RollState.ToWound && !currentRole.LethalStrike)
    {
      CurrentDiceMessage.Results[0] = new RollResult(currentRole.RawResults, currentRole.RerollResults, currentRole.OldResults, currentRole.DiceSides, currentRole.RollState, currentRole.RerollState, currentRole.DiceGoal, false, currentRole.BattleFocus, true, currentRole.Poison, currentRole.Poison5Up, currentRole.PoisonHits, false, _lethalStrikeChecked, currentRole.LethalStrikeHits);
    }
  }

  private void ToggleBattleFocus()
  {
    _battleFocusChecked = !_battleFocusChecked;
    var currentRole = CurrentRole;
    if (_battleFocusChecked && CurrentRoleState == RollState.ToHit && !currentRole.BattleFocus)
    {
      CurrentDiceMessage.Results[0] = new RollResult(currentRole.RawResults, currentRole.RerollResults, currentRole.OldResults, currentRole.DiceSides, currentRole.RollState, currentRole.RerollState, currentRole.DiceGoal, true, _battleFocusChecked, false, currentRole.Poison, currentRole.Poison5Up, currentRole.PoisonHits, false, currentRole.LethalStrike, currentRole.LethalStrikeHits);
    }
  }

  private void TogglePoison5()
  {
    _poison5Checked = !_poison5Checked;
    var currentRole = CurrentRole;
    if (_poison5Checked && CurrentRoleState == RollState.ToHit && !currentRole.Poison5Up)
    {
      CurrentDiceMessage.Results[0] = new RollResult(currentRole.RawResults, currentRole.RerollResults, currentRole.OldResults, currentRole.DiceSides, currentRole.RollState, currentRole.RerollState, currentRole.DiceGoal, true, currentRole.BattleFocus, false, currentRole.Poison, _poison5Checked, currentRole.PoisonHits, false, currentRole.LethalStrike, currentRole.LethalStrikeHits);
    }
  }

  private void TogglePoison()
  {
    _poisonChecked = !_poisonChecked;
    var currentRole = CurrentRole;
    if (_poisonChecked && CurrentRoleState == RollState.ToHit && !currentRole.Poison)
    {
      CurrentDiceMessage.Results[0] = new RollResult(currentRole.RawResults, currentRole.RerollResults, currentRole.OldResults, currentRole.DiceSides, currentRole.RollState, currentRole.RerollState, currentRole.DiceGoal, true, currentRole.BattleFocus, false, _poisonChecked, currentRole.Poison5Up, currentRole.PoisonHits, false, currentRole.LethalStrike, currentRole.LethalStrikeHits);
    }
  }
}