@page "/dice"

<div class="mb-3">
  <button class="btn btn-secondary" @onclick="() => SetAndRollDice(1)">1</button>
  <button class="btn btn-secondary" @onclick="() => SetAndRollDice(2)">2</button>
  <button class="btn btn-secondary" @onclick="() => SetAndRollDice(3)">3</button>
  <button class="btn btn-secondary" @onclick="() => SetAndRollDice(4)">4</button>
  <button class="@GetDiceClass(3)" @onclick="() => SelectDice(3)">d3</button>
  <button class="@GetDiceClass(6)" @onclick="() => SelectDice(6)">d6</button>
  <button class="@GetDiceClass(8)" @onclick="() => SetAndRollDice(1, 8)">d8</button>
</div>
<div class="mb-3">
  <div class="input-group mb-3">
    <input inputmode="numeric" pattern="[0-9]*" type="number" class="form-control" @onfocus="PrepareForRoll" placeholder="Dice" aria-label="Dice" @bind="_diceAmount">
  </div>
  <div class="row align-items-center mt-2">
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(2)">
        2+
      </button>
    </div>
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(3)">
        3+
      </button>
    </div>
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(4)">
        4+
      </button>
    </div>
  </div>

  <div class="row align-items-center">
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(5)">
        5+
      </button>
    </div>
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(6)">
        6+
      </button>
    </div>
    <div class="col">
      <button type="button" class="btn btn-outline-secondary w-100 my-2" data-bs-toggle="modal" data-bs-target="#optionsModal">
        <span class="oi oi-menu" aria-hidden="true"></span>
      </button>
      <div class="modal fade" id="optionsModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-body">
              <div class="modal-header">
                <h5 class="modal-title">Actions</h5>
              </div>
              <div class="row">
                <div class="col">
                  <button type="button" class="btn btn-outline-primary w-100 my-2" data-bs-dismiss="modal" @onclick="RerollFailed" disabled="@RerollWasDone">
                    <span>Reroll </span>
                    @if (CurrentRoleState is RollState.ToHit)
                    {
                      <span>misses</span>
                    }
                    @if (CurrentRoleState is RollState.ToWound)
                    {
                      <span>failed wounds</span>
                    }
                    @if (CurrentRoleState is RollState.ArmorSave)
                    {
                      <span>failed armor saves</span>
                    }
                    @if (CurrentRoleState is RollState.WardSave)
                    {
                      <span>failed ward saves</span>
                    }
                  </button>
                </div>
                <div class="col">
                  <button type="button" class="btn btn-outline-primary w-100 my-2" data-bs-dismiss="modal" @onclick="RerollSuceeded" disabled="@RerollWasDone">
                    <span>Reroll </span>
                    @if (CurrentRoleState is RollState.ToHit)
                    {
                      <span>hits</span>
                    }
                    @if (CurrentRoleState is RollState.ToWound)
                    {
                      <span>successful wounds</span>
                    }
                    @if (CurrentRoleState is RollState.ArmorSave)
                    {
                      <span>successful armor saves</span>
                    }
                    @if (CurrentRoleState is RollState.WardSave)
                    {
                      <span>successful ward saves</span>
                    }
                  </button>
                </div>
              </div>
              <div class="row">
                <div class="col">
                  <button type="button" class="btn btn-outline-primary w-100 my-2" data-bs-dismiss="modal" @onclick="RerollOnes" disabled="@RerollWasDone">Reroll 1s</button>
                </div>
                <div class="col">
                  <button type="button" class="btn btn-outline-primary w-100 my-2" data-bs-dismiss="modal" disabled="@(!IsFirstRoll)" @onclick="RollAutoHits">
                    Automatic hits
                  </button>
                </div>
              </div>

              <div class="modal-header">
                <h5 class="modal-title">Options for <b>next</b> roll</h5>
              </div>
              <div class="row">
                <div class="col">
                  <button type="button" disabled="@NextRollIsNotToHit" class="@($"btn btn-outline-{(_battleFocusChecked ? "primary" : "secondary")} w-100 my-2")" @onclick="() => _battleFocusChecked = !_battleFocusChecked">Battlefocus</button>
                </div>
                <div class="col">
                  <button type="button" disabled="@NextRollIsNotToHit" class="@($"btn btn-outline-{(_poisonChecked ? "primary" : "secondary")} w-100 my-2")" @onclick="() => _poisonChecked = !_poisonChecked">Poison</button>
                </div>
              </div>
              <div class="row">
                <div class="col">
                  <button type="button" disabled="@NextRollIsNotToHit" class="@($"btn btn-outline-{(_lethalStrikeChecked ? "primary" : "secondary")} w-100 my-2")" @onclick="() => _lethalStrikeChecked = !_lethalStrikeChecked">Lethal Strike</button>
                </div>
                <div class="col">
                  <button type="button" disabled="@NextRollIsNotToHit" class="@($"btn btn-outline-{(_poison5Checked ? "primary" : "secondary")} w-100 my-2")" @onclick="() => _poison5Checked = !_poison5Checked">Poison 5+</button>
                </div>
              </div>

              <div class="modal-header">
                <h5 class="modal-title">Options for <b>all</b> rolls</h5>
              </div>
              <div class="row">
                <div class="col">
                  <button type="button" class="@($"btn btn-outline-{(_noWardChecked ? "primary" : "secondary")} w-100 my-2")" @onclick="() => _noWardChecked = !_noWardChecked">No ward saves</button>
                </div>
                <div class="col">
                  <button type="button" class="@($"btn btn-outline-{(_noArmorChecked ? "primary" : "secondary")} w-100 my-2")" @onclick="() => _noArmorChecked = !_noArmorChecked">No armor saves</button>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div>
  @foreach (var message in _messages.Select((value, index) => new {value, index}))
  {
    <div class="card mb-3">
      @if (FirstRoleState == RollState.None)
      {
        <div class="card-header">
          @(message.value.Results.First().RawResults.Count)D@(message.value.Results.First().DiceSides)
        </div>
      }
      @if (FirstRoleState == RollState.AutomaticHit)
      {
        <div class="card-header">
          @(message.value.Results.Last().RawResults.Count) automatic hits
          @if (SpecialRules.Count > 0)
          {
            <span> with @(string.Join(", ", SpecialRules))</span>
          }
        </div>
      }
      @if (FirstRoleState == RollState.ToHit)
      {
        <div class="card-header">
          @(message.value.Results.Last().RawResults.Count) attacks hitting on @(message.value.Results.First().DiceGoal)+
          @if (SpecialRules.Count > 0)
          {
            <span> with @(string.Join(", ", SpecialRules))</span>
          }
        </div>
      }
      <div class="card-body m-0">
        @foreach (var rollResult in message.value.Results.Select((val, index) => new {val, index}))
        {
          @if (rollResult.index == 0 && message.index == 0)
          {
            <button class="btn btn-outline-secondary float-end ms-2" @onclick="DeleteLastRoll">
              <span class="oi oi-action-undo"></span>
            </button>  
          }
          
          <div>
            @if (rollResult.val.RerollState is RerollState.RerollBiggerThan)
            {
              @if (rollResult.val.RollState is RollState.ArmorSave or RollState.WardSave)
              {
                <div>
                  <b>+@rollResult.val.FailedRerolls from rerolling</b> @(rollResult.val.DiceGoal)+ (<RedGreenResultList Rolls="@rollResult.val.RerollResults" DiceGoal="@rollResult.val.DiceGoal" />)
                </div>
              }
              else
              {
                <div>
                  <b>-@rollResult.val.FailedRerolls from rerolling</b> @(rollResult.val.DiceGoal)+ (<RedGreenResultList Rolls="@rollResult.val.RerollResults" DiceGoal="@rollResult.val.DiceGoal" />)
                </div>
              }
            }
            @if (rollResult.val.RerollState is RerollState.RerollSmallerThan)
            {
              if (rollResult.val.RollState is RollState.ToHit or RollState.ToWound)
              {
                <div>
                  <b>+@rollResult.val.SucessfullRerolls from rerolling</b> up to @(rollResult.val.DiceGoal - 1) (<RedGreenResultList Rolls="@rollResult.val.RerollResults" DiceGoal="@rollResult.val.DiceGoal" />)
                </div>
              }
              else
              {
                <div>
                  <b>-@rollResult.val.SucessfullRerolls from rerolling</b> up to @(rollResult.val.DiceGoal - 1) (<RedGreenResultList Rolls="@rollResult.val.RerollResults" DiceGoal="@rollResult.val.DiceGoal" />)
                </div>
              }
            }
            @if (rollResult.val.RerollState is RerollState.Reroll1s)
            {
              if (rollResult.val.RollState is RollState.ToHit or RollState.ToWound)
              {
                <div>
                  <b>+@rollResult.val.SucessfullRerolls from rerolling</b> 1s (<RedGreenResultList Rolls="@rollResult.val.RerollResults" DiceGoal="@rollResult.val.DiceGoal" />)
                </div>
              }
              else
              {
                <div>
                  <b>-@rollResult.val.SucessfullRerolls from rerolling</b> 1s (<RedGreenResultList Rolls="@rollResult.val.RerollResults" DiceGoal="@rollResult.val.DiceGoal" />)
                </div>
              }
              
            }
            @if (rollResult.val.RollState == RollState.ToHit)
            {
              <div>
                <b>@(rollResult.val.SucessfullRolls) hitting</b>
                @if (rollResult.val.BattleFocus)
                {
                  <span> (+@rollResult.val.BattleFocusHits hits from Battlefocus)</span>  
                }
                <span> on @(rollResult.val.DiceGoal)+</span>
                @if (rollResult.val.Poison || rollResult.val.Poison5Up)
                {
                  <span>, Poison: @rollResult.val.PoisonHits</span>  
                }
              </div>
            }
            @if (rollResult.val.RollState == RollState.ToWound)
            {
              <div>
                <b>@(rollResult.val.SucessfullRolls) wounding</b>
                @if (rollResult.val.Poison || rollResult.val.Poison5Up)
                {
                  <span> (+@rollResult.val.PoisonHits wounds from Poison)</span>  
                }
                <span> on @(rollResult.val.DiceGoal)+</span>
                @if (rollResult.val.LethalStrike)
                {
                  <span>, Lethal Strike: @rollResult.val.LethalStrikeHits</span>  
                }
              </div>
            }
            @if (rollResult.val.RollState == RollState.AutomaticHit)
            {
              <div>
                <b>@(rollResult.val.SucessfullRolls) automatic hits</b>
              </div>
            }
            @if (rollResult.val.RollState == RollState.ArmorSave)
            {
              @if (rollResult.val.DiceGoal == _defaultNoRoll)
              {
                <div class="mb-3">
                  <b>No armor saves rolled</b>
                </div>
              }
              else
              {
                <div>
                  <b>@(rollResult.val.FailedRolls) armor saves failed</b>
                  @if (rollResult.val.LethalStrike)
                  {
                    <span> (+@rollResult.val.LethalStrikeHits from Lethal Strike)</span>  
                  }
                  
                  <span> on @(rollResult.val.DiceGoal)+</span>
                </div>
              }
            }
            @if (rollResult.val.RollState == RollState.WardSave)
            {
              @if (rollResult.val.DiceGoal == _defaultNoRoll)
              {
                <div class="mb-3">
                  <b>No ward saves rolled</b>
                </div>
              }
              else
              {
                <div>
                  <b>@(rollResult.val.FailedRolls) ward saves failed</b> on @(rollResult.val.DiceGoal)+
                </div>
              }
            }
          </div>
          
          @if (rollResult.val.DiceGoal != _defaultNoRoll && rollResult.val.RollState != RollState.AutomaticHit)
          {
            <div>
              <span>@(rollResult.val.RawResults.Count)D@(rollResult.val.DiceSides): </span>
              @if (rollResult.val.DiceGoal == 0)
              {
                @string.Join(", ", rollResult.val.RawResults)
              }
              else
              {
                <RedGreenResultList Rolls="@rollResult.val.RawResults" DiceGoal="@rollResult.val.DiceGoal" /> 
              }
              @if (rollResult.val.RawResults.Count > 1)
              {
                <span> (@rollResult.val.RawResults.Sum())</span>
              }
            </div>
            @if (rollResult.val.DiceGoal != 0)
            {
              <div class="row justify-content-between mb-3">
                @foreach (var res in rollResult.val.GroupedResults)
                {
                  <div class="col">
                    @res.Min+ : @res.BiggerThanAmount
                  </div>
                }
              </div>  
            }
          }
        }
      </div>
    </div>
  }
</div>

@inject Dice _dice

@code {
  private int? _diceAmount;
  private int _selectedDice = 6;
  private int _defaultNoRoll = 7;
  private bool _poisonChecked;
  private bool _poison5Checked;
  private bool _lethalStrikeChecked;
  private bool _battleFocusChecked;
  private bool _noArmorChecked;
  private bool _noWardChecked;
  private bool IsFirstRoll => CurrentRoleState is RollState.WardSave or RollState.None;
  private readonly List<DiceMessage> _messages = new();
  private RollResult CurrentRole => CurrentDiceMessage?.Results?.First();
  private bool RerollWasDone => CurrentRole?.RerollState != RerollState.NoReroll;
  private RollState CurrentRoleState => CurrentDiceMessage?.Results?.First().RollState ?? RollState.None;
  private RollState FirstRoleState => CurrentDiceMessage?.Results?.Last().RollState ?? RollState.None;
  public bool NextRollIsNotToHit => !(CurrentRoleState is RollState.None or RollState.WardSave);
  private DiceMessage CurrentDiceMessage => _messages.FirstOrDefault();

  public List<string> SpecialRules
  {
    get
    {
      var list = new List<string>();
      if (CurrentRole?.Poison == true && CurrentRole?.Poison5Up != true) list.Add("Poison");
      if (CurrentRole?.Poison5Up == true) list.Add("Poison 5+"); 
      if (CurrentRole?.BattleFocus == true) list.Add("Battlefocus"); 
      if (CurrentRole?.LethalStrike == true) list.Add("Lethal strike"); 
      return list;
    }
  }

  private void SetAndRollDice(int amount)
  {
    _diceAmount = amount;
    var rollResult = _dice.JustRoll(_diceAmount.Value, _selectedDice);
    var diceMessage = new DiceMessage(rollResult);
    _messages.Insert(0, diceMessage);
  }

  private void SelectDice(int diceSide)
  {
    _selectedDice = diceSide;
  }

  private object GetDiceClass(int dice)
  {
    return dice == _selectedDice ? "btn btn-outline-primary" : "btn btn-outline-secondary";
  }

  private void DeleteLastRoll()
  {
    var rollResults = CurrentDiceMessage.Results;
    if (rollResults[0].RerollState != RerollState.NoReroll)
    {
      rollResults[0] = rollResults[0].UndoReroll();
    }
    else if (rollResults.Count == 1)
    {
      _messages.RemoveAt(0);
    }
    else
    {
      rollResults.RemoveAt(0);
    }
  }

  private void ClickDice(int toHit)
  {
    if (_diceAmount != null)
    {
      if (IsFirstRoll)
      {
        var result = DoRoll(_diceAmount.Value, toHit, null, false);
        _messages.Insert(0, new DiceMessage(result));
      }
      else
      {
        var rollResults = CurrentDiceMessage.Results;
        var lastResult = rollResults.First();
        var result = DoRoll(0, toHit, lastResult, false);
        rollResults.Insert(0, result);
      }
    }
  }

  private RollResult DoRoll(int diceAmount, int toHit, RollResult oldResult, bool automaticHits)
  {
    var rollResult = CurrentRoleState switch
    {
      RollState.None => _dice.ToHit(diceAmount, _selectedDice, toHit, automaticHits, _battleFocusChecked, _poisonChecked, _poison5Checked, _lethalStrikeChecked),
      RollState.AutomaticHit => _dice.ToWound(toHit, oldResult),
      RollState.ToHit => RollToWound(toHit, oldResult),
      RollState.ToWound => RollArmorSave(toHit, oldResult),
      RollState.ArmorSave => RollWardSave(toHit, oldResult),
      _ => _dice.ToHit(diceAmount, _selectedDice, toHit, automaticHits, _battleFocusChecked, _poisonChecked, _poison5Checked, _lethalStrikeChecked)
      };
    _battleFocusChecked = false;
    _poisonChecked = false;
    _poison5Checked = false;
    _lethalStrikeChecked = false;
    return rollResult;
  }

  private RollResult RollWardSave(int toHit, RollResult oldResult)
  {
    return _noWardChecked
      ? NoWardSaveResult(oldResult)
      : _dice.WardSave(toHit, oldResult);
  }

  private RollResult RollArmorSave(int toHit, RollResult oldResult)
  {
    var result = _noArmorChecked
      ? NoArmorSaveResult(oldResult)
      : _dice.ArmorSave(toHit, oldResult);

    return _noWardChecked ? NoWardSaveResult(result) : result;
  }

  private RollResult NoWardSaveResult(RollResult result)
  {
    var rollResults = CurrentDiceMessage.Results;
    rollResults.Insert(0, result);
    var lastResult = rollResults.First();
    return new RollResult(lastResult.RawResults, lastResult.RerollResults, lastResult.OldResults, lastResult.DiceSides, RollState.WardSave,
      lastResult.RerollState, _defaultNoRoll, false, lastResult.BattleFocus, false, lastResult.Poison, lastResult.Poison5Up,
      lastResult.PoisonHits, false, lastResult.LethalStrike, lastResult.LethalStrikeHits);
  }

  private RollResult RollToWound(int toHit, RollResult oldResult)
  {
    var result = _dice.ToWound(toHit, oldResult);

    if (_noArmorChecked && _noWardChecked)
    {
      var armorResult = NoArmorSaveResult(result);
      return NoWardSaveResult(armorResult);
    }

    return _noArmorChecked ? NoArmorSaveResult(result) : result;
  }

  private RollResult NoArmorSaveResult(RollResult result)
  {
    var rollResults = CurrentDiceMessage.Results;
    rollResults.Insert(0, result);
    var lastResult = rollResults.First();
    var armorResult = new RollResult(lastResult.RawResults, lastResult.RerollResults, lastResult.OldResults, lastResult.DiceSides,
      RollState.ArmorSave, lastResult.RerollState, _defaultNoRoll, false, lastResult.BattleFocus, false,
      lastResult.Poison, lastResult.Poison5Up, lastResult.PoisonHits, false, lastResult.LethalStrike, lastResult.LethalStrikeHits);
    return armorResult;
  }

  private void SetAndRollDice(int amount, int sides)
  {
    _selectedDice = sides;
    SetAndRollDice(amount);
  }

  private void PrepareForRoll()
  {
    _diceAmount = null;
    _selectedDice = 6;
  }

  private void RollAutoHits()
  {
    if (IsFirstRoll && _diceAmount != null)
    {
      var result = DoRoll(_diceAmount.Value, 0, null, true);
      _messages.Insert(0, new DiceMessage(result));
    }
  }

  private void RerollOnes()
  {
    if (CurrentRole != null)
    {
      var reroll = _dice.RerRollOnes(CurrentRole);
      CurrentDiceMessage.Results.RemoveAt(0);
      CurrentDiceMessage.Results.Insert(0, reroll);
    }
  }

  private void RerollFailed()
  {
    if (CurrentRole != null)
    {
      var reroll = _dice.RerRollSmallerThan(CurrentRole.DiceGoal - 1, CurrentRole);
      CurrentDiceMessage.Results.RemoveAt(0);
      CurrentDiceMessage.Results.Insert(0, reroll);
    }
  }

  private void RerollSuceeded()
  {
    if (CurrentRole != null)
    {
      var reroll = _dice.RerRollBiggerThan(CurrentRole.DiceGoal, CurrentRole);
      CurrentDiceMessage.Results.RemoveAt(0);
      CurrentDiceMessage.Results.Insert(0, reroll);
    }
  }
}