@page "/probability"
@using battle_mate.Pages.BattleResult

<div class="row mb-3">
  <div class="row align-items-center mt-2">
    <div class="input-group mb-3">
      <input value="@ProbabilityState.DiceAmount" @oninput="UpdateDiceAmount" inputmode="numeric" pattern="[0-9]*" type="number" class="form-control text-end" @onfocus="ResetProbabilityCreation" placeholder="Amount of dice" aria-label="Dice">
    </div>
  </div>
  <div class="row text-center">
    @if (ProbabilityState.BuildingChain != null)
    {
      <span><b>@ProbabilityState.DiceAmount hits</b> on @ProbabilityState.BuildingChain.ToHit+/@ProbabilityState.BuildingChain.ToWound+/@ProbabilityState.BuildingChain.ToArmorSave+/@ProbabilityState.BuildingChain.ToWardSave+ => <b>@ProbabilityState.BuildingChain.CurrentWounds.ToString("F2") wounds</b></span>
    }
    else if (ProbabilityState.DiceAmount == null)
    {
      <span>Select dice amount first</span>
    }
    else
    {
      <span>Select to hit target</span> 
    }
  </div>
  <div class="row align-items-center mt-2">
      <div class="col">
        <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(2)">
          2+
        </button>
      </div>
      <div class="col">
        <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(3)">
          3+
        </button>
      </div>
      <div class="col">
        <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(4)">
          4+
        </button>
      </div>
    </div>
  <div class="row align-items-center mt-2">
      <div class="col">
        <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(5)">
          5+
        </button>
      </div>
      <div class="col">
        <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(6)">
          6+
        </button>
      </div>
      <div class="col">
        <button class="btn btn-outline-primary w-100 my-2" @onclick="SkipDice">
          @switch (ProbabilityState.BuildState)
          {
            case BuildState.IsNothing:
              <span>auto hit</span>
              break;
            case BuildState.IsHitting:
              <span>auto wnd</span>
              break;
            case BuildState.IsWounding:
              <span>no armor</span>
              break;
            case BuildState.IsArmorSave:
              <span>no ward</span>                         
              break;
            default:
              <span>auto hit</span>
              break;
          }
        </button>
      </div>
    </div>
  <div class="row align-items-center">
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2 collapse">
      </button>
    </div>
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2 dropdown-toggle" type="button" id="diceOptions" data-bs-toggle="dropdown" aria-expanded="false">
        <span class="oi oi-cog"></span>
      </button>
      <ul class="dropdown-menu" aria-labelledby="diceOptions">
        <li class="ps-2 py-3">
          <input class="form-check-input" type="checkbox" value="" id="_poisonChecked" @bind="@ProbabilityState.PoisonChecked">
          <label class="form-check-label ps-2" for="_poisonChecked">
            Poison
          </label>
        </li>
        <li class="ps-2 py-3">
          <input class="form-check-input" type="checkbox" value="" id="_poison5Checked" @bind="@ProbabilityState.Poison5Checked">
          <label class="form-check-label ps-2" for="_poison5Checked">
            Poison 5+
          </label>
        </li>
        <li class="ps-2 py-3">
          <input class="form-check-input" type="checkbox" value="" id="_battleFocusChecked" @bind="@ProbabilityState.BattleFocusChecked">
          <label class="form-check-label ps-2" for="_battleFocusChecked">
            Battlefocus
          </label>
        </li>
        <li class="ps-2 py-3">
          <input class="form-check-input" type="checkbox" value="" id="_lethalStrikeChecked" @bind="@ProbabilityState.LethalStrikeChecked">
          <label class="form-check-label ps-2" for="_lethalStrikeChecked">
            Lethal strike
          </label>
        </li>
      </ul>
    </div>
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2 dropdown-toggle" type="button" id="rerollOptions" data-bs-toggle="dropdown" aria-expanded="false">
        <span class="oi oi-reload"></span>
      </button>
      <ul class="dropdown-menu" aria-labelledby="rerollOptions">
        <li class="ps-2 py-3">
          <input class="form-check-input" type="checkbox" value="" id="_rerollSuccessChecked" @bind="@ProbabilityState.RerollSuccessChecked"> 
          <label class="form-check-label ps-2" for="_lethalStrikeChecked">
            Reroll sucess
          </label>
        </li>
        <li class="ps-2 py-3">
          <input class="form-check-input" type="checkbox" value="" id="_rerollFailsChecked" @bind="@ProbabilityState.RerollFailsChecked">
          <label class="form-check-label ps-2" for="_lethalStrikeChecked">
            Reroll Fails
          </label>
        </li>
        <li class="ps-2 py-3">
          <input class="form-check-input" type="checkbox" value="" id="_reroll1sChecked" @bind="@ProbabilityState.Reroll1SChecked">
          <label class="form-check-label ps-2" for="_lethalStrikeChecked">
            Reroll 1s
          </label>
        </li>
      </ul>
    </div>
  </div>
</div>
<div class="row">
  @foreach (var prob in ProbabilityState.ProbabilityChains)
  {
    <div>
      <div class="card mb-3">
        <div class="card-header">
          <div class="row justify-content-between">
            <span class="col">
              <b>@prob.StartDice hits</b> on @prob.ToHit+/@prob.ToWound+/@prob.ToArmorSave+/@prob.ToWardSave+ => <b>@prob.ExpectedFailedWardSaves.ToString("F2") wounds</b>
            </span>
            <div class="col">
              <div class="float-end">
                <button class="btn btn-outline-danger" type="button" @onclick="() => DeleteProbability(prob)"><span class="oi oi-trash"></span></button>
              </div>
            </div>
          </div>
        </div>
        <div class="card-body">
          <details>
            <summary>Details</summary>
            <div>
              <table class="table">
                <thead>
                    <tr>
                      <th>Step</th>
                      <th>Result</th>
                    </tr>
                  </thead>
                <tbody>
                <tr>
                  <td>@prob.StartDice hitting on @prob.ToHit+</td>
                  <td>@prob.ExpectedHits.SuccessResult.ToString("F2") hits</td>
                </tr>
                <tr>
                  <td>@prob.ExpectedWounds.StartResult.ToString("F2") wounding on @prob.ToWound+</td>
                  <td>@prob.ExpectedWounds.SuccessResult.ToString("F2") wounds</td>
                </tr>
                <tr>
                  <td>@prob.ExpectedArmorSaves.StartResult.ToString("F2") armor saves on @prob.ToArmorSave+</td>
                  <td>@prob.ExpectedArmorSaves.FailedResult.ToString("F2") failed armor saves</td>
                </tr>
                <tr>
                  <td>@prob.ExpectedWardSaves.StartResult.ToString("F2") ward armor saves on @prob.ToWardSave+</td>
                  <td>@prob.ExpectedWardSaves.FailedResult.ToString("F2") unsaved wounds</td>
                </tr>
                </tbody>
              </table>
            </div>
          </details>
        </div>  
      </div>
    </div>
  }
</div>

@inject ProbabilityState ProbabilityState
@inject LocalStorageRepository LocalStorageRepository

@code {
  protected override void OnInitialized()
  {
    ProbabilityState.OnProbabilitiesChanged += async (_, _) =>
    {
      await LocalStorageRepository.SetProbabilities(ProbabilityState.ProbabilityChains);
    };
  }

  private async void ClickDice(int target)
  {
    ProbabilityState.AddBuildStep(target);
    await LocalStorageRepository.SetProbabilities(ProbabilityState.ProbabilityChains);
  }

  private void SkipDice()
  {
    ProbabilityState.SkipNextStep();
  }

  private void UpdateDiceAmount(ChangeEventArgs obj)
  {
    if (int.TryParse(obj.Value?.ToString(), out var num))
    {
      ProbabilityState.DiceAmount = num;
    }
  }

  private void ResetProbabilityCreation()
  {
    ProbabilityState.ResetBuilding();
  }

  private async void DeleteProbability(ProbabilityChain prob)
  {
    ProbabilityState.Delete(prob);
    await LocalStorageRepository.SetProbabilities(ProbabilityState.ProbabilityChains);
  }
}