@page "/probability"
@using battle_mate.Pages.BattleResult

<div class="row align-items-center mt-2">
  <div class="input-group mb-3">
    <input value="@ProbabilityState.DiceAmount" @oninput="UpdateDiceAmount" inputmode="numeric" pattern="[0-9]*" type="number" class="form-control text-end" @onfocus="ResetProbabilityCreation" placeholder="Amount of dice" aria-label="Dice">
  </div>
</div>
<div class="row text-center">
  @if (ProbabilityState.BuildingChain != null)
  {
    <span>
      <b>
        @ProbabilityState.DiceAmount hits
        @if (ListOfRules(ProbabilityState).Any())
        {
          <span>(@string.Join(", ", ListOfRules(ProbabilityState)))</span>
        }                  
      </b> 
      on @ProbabilityState.BuildingChain.ToHit+/@ProbabilityState.BuildingChain.ToWound+/@ProbabilityState.BuildingChain.ToArmorSave+/@ProbabilityState.BuildingChain.ToWardSave+ => <b>@ProbabilityState.BuildingChain.CurrentWounds.ToString("F2")</b>
    </span>
  }
  else if (ProbabilityState.DiceAmount == null)
  {
    <span>Select dice amount first</span>
  }
  else
  {
    <span>Select to hit target</span> 
  }
</div>
<div class="row align-items-center mt-2">
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(2)">
        2+
      </button>
    </div>
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(3)">
        3+
      </button>
    </div>
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(4)">
        4+
      </button>
    </div>
  </div>
<div class="row align-items-center mt-2">
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(5)">
        5+
      </button>
    </div>
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="() => ClickDice(6)">
        6+
      </button>
    </div>
    <div class="col">
      <button class="btn btn-outline-primary w-100 my-2" @onclick="SkipDice">
        @switch (ProbabilityState.BuildState)
        {
          case BuildState.IsNothing:
            <span>auto hit</span>
            break;
          case BuildState.IsHitting:
            <span>auto wnd</span>
            break;
          case BuildState.IsWounding:
            <span>no armor</span>
            break;
          case BuildState.IsArmorSave:
            <span>no ward</span>                         
            break;
          default:
            <span>auto hit</span>
            break;
        }
      </button>
    </div>
  </div>
<div class="row align-items-center">
  <div class="col">
    <button class="btn btn-outline-primary w-100 my-2 collapse">
    </button>
  </div>
  <div class="col">
    <button class="btn btn-outline-primary w-100 my-2 dropdown-toggle" type="button" id="diceOptions" data-bs-toggle="dropdown" aria-expanded="false">
      <span class="oi oi-cog"></span>
    </button>
    <ul class="dropdown-menu" aria-labelledby="diceOptions">
      <li class="ps-2 py-3" onclick="event.stopPropagation()">
        <input class="form-check-input" type="checkbox" value="" id="_poisonChecked" @bind="@ProbabilityState.PoisonChecked">
        <label class="form-check-label ps-2" for="_poisonChecked">
          Poison
        </label>
      </li>
      <li class="ps-2 py-3" onclick="event.stopPropagation()">
        <input class="form-check-input" type="checkbox" value="" id="_poison5Checked" @bind="@ProbabilityState.Poison5Checked">
        <label class="form-check-label ps-2" for="_poison5Checked">
          Poison 5+
        </label>
      </li>
      <li class="ps-2 py-3" onclick="event.stopPropagation()">
        <input class="form-check-input" type="checkbox" value="" id="_battleFocusChecked" @bind="@ProbabilityState.BattleFocusChecked">
        <label class="form-check-label ps-2" for="_battleFocusChecked">
          Battlefocus
        </label>
      </li>
      <li class="ps-2 py-3" onclick="event.stopPropagation()">
        <input class="form-check-input" type="checkbox" value="" id="_lethalStrikeChecked" @bind="@ProbabilityState.LethalStrikeChecked">
        <label class="form-check-label ps-2" for="_lethalStrikeChecked">
          Lethal strike
        </label>
      </li>
    </ul>
  </div>
  <div class="col">
    <button class="btn btn-outline-primary w-100 my-2 dropdown-toggle" type="button" id="rerollOptions" data-bs-toggle="dropdown" aria-expanded="false">
      <span class="oi oi-reload"></span>
    </button>
    <ul class="dropdown-menu" aria-labelledby="rerollOptions">
      <li class="ps-2 py-3" onclick="event.stopPropagation()">
        <input class="form-check-input" type="checkbox" value="" @bind="@ProbabilityState.RerollSuccessChecked" id="_rerollSuccessChecked"> 
        <label class="form-check-label ps-2" for="_rerollSuccessChecked">
          Reroll sucess
        </label>
      </li>
      <li class="ps-2 py-3" onclick="event.stopPropagation()">
        <input class="form-check-input" type="checkbox" value="" @bind="@ProbabilityState.RerollFailsChecked" id="_rerollFailsChecked">
        <label class="form-check-label ps-2" for="_rerollFailsChecked">
          Reroll Fails
        </label>
      </li>
      <li class="ps-2 py-3" onclick="event.stopPropagation()">
        <input class="form-check-input" type="checkbox" value="" @bind="@ProbabilityState.Reroll1SChecked" id="_reroll1sChecked">
        <label class="form-check-label ps-2" for="_reroll1sChecked">
          Reroll 1s
        </label>
      </li>
    </ul>
  </div>
</div>
<div class="row mt-3">
  @foreach (var prob in ProbabilityState.ProbabilityChains)
  {
    <div>
      <div class="card mb-3">
        <div class="card-header">
          <div class="row justify-content-between">
            <span class="col">
              <b>
                @prob.StartDice hits
                @if (ListOfRules(prob).Any())
                {
                  <span>(@string.Join(", ", ListOfRules(prob)))</span>
                }
              </b> on @prob.ToHit+/@prob.ToWound+/@prob.ToArmorSave+/@prob.ToWardSave+ => <b>@prob.ExpectedFailedWardSaves.ToString("F2") wounds</b>
            </span>
            <div class="col">
              <div class="float-end">
                <button class="btn btn-outline-danger" type="button" @onclick="() => DeleteProbability(prob)"><span class="oi oi-trash"></span></button>
              </div>
            </div>
          </div>
        </div>
        <div class="card-body">
          <details>
            <summary>Details</summary>
            <div>
              <table class="table">
                <thead>
                    <tr>
                      <th>Step</th>
                      <th>Result</th>
                    </tr>
                  </thead>
                <tbody>
                <tr>
                  <td>
                    <HitStepComponent Prob="prob"></HitStepComponent>
                  </td>
                  <td>
                    <HitResultComponent Prob="prob"></HitResultComponent>
                  </td>
                </tr>
                <tr>
                  <td>
                    <WoundStepComponent Prob="prob"></WoundStepComponent>
                  </td>
                  <td>
                   <WoundResultComponent Prob="prob"></WoundResultComponent>
                  </td>
                </tr>
                <tr>
                  <td>
                    <ArmorSaveStepComponent Prob="prob"></ArmorSaveStepComponent>
                  </td>
                  <td>
                    <ArmorSaveResultComponent Prob="prob"></ArmorSaveResultComponent>
                  </td>
                </tr>
                <tr>
                  <td><WardSaveStepComponent Prob="prob"></WardSaveStepComponent></td>
                  <td><WardSaveResultComponent Prob="prob"></WardSaveResultComponent></td>
                </tr>
                </tbody>
              </table>
            </div>
          </details>
        </div>  
      </div>
    </div>
  }
</div>

@inject ProbabilityState ProbabilityState
@inject LocalStorageRepository LocalStorageRepository

@code {
  protected override void OnInitialized()
  {
    ProbabilityState.OnProbabilitiesChanged += async (_, _) =>
    {
      await LocalStorageRepository.SetProbabilities(ProbabilityState.ProbabilityChains);
    };
  }

  private async void ClickDice(int target)
  {
    ProbabilityState.AddBuildStep(target);
    await LocalStorageRepository.SetProbabilities(ProbabilityState.ProbabilityChains);
  }

  private void SkipDice()
  {
    ProbabilityState.SkipNextStep();
  }

  private void UpdateDiceAmount(ChangeEventArgs obj)
  {
    if (int.TryParse(obj.Value?.ToString(), out var num))
    {
      ProbabilityState.DiceAmount = num;
    }
  }

  private void ResetProbabilityCreation()
  {
    ProbabilityState.ResetBuilding();
  }

  private async void DeleteProbability(ProbabilityChain prob)
  {
    ProbabilityState.Delete(prob);
    await LocalStorageRepository.SetProbabilities(ProbabilityState.ProbabilityChains);
  }

  private List<string> ListOfRules(ProbabilityChain prob)
  {
    var list = new List<string>();
    if (prob.BattleFocusChecked) list.Add("BF");
    if (prob.PoisonChecked) list.Add("P");
    if (prob.Poison5Checked) list.Add("P5");
    if (prob.LethalStrikeChecked) list.Add("LS");
    if (prob.RerollsHit?.IsChecked == true) list.Add("RRHi");
    if (prob.RerollsWound?.IsChecked == true) list.Add("RRWo");
    if (prob.RerollsArmorSaves?.IsChecked == true) list.Add("RRAr");
    if (prob.RerollsWardSaves?.IsChecked == true) list.Add("RRWa");
    return list;
  }

  private IEnumerable<string> ListOfRules(ProbabilityState prob)
  {
    var list = new List<string>();
    if (prob.BattleFocusChecked) list.Add("BF");
    if (prob.PoisonChecked) list.Add("P");
    if (prob.Poison5Checked) list.Add("P5");
    if (prob.LethalStrikeChecked) list.Add("LS");
    return list;
  }
}